type Query {
    ## Pizzas
    getPizzas: [Pizza]
    getPizzasByName(name: String!): [Pizza]
    getPizzasByNameIn(names: [String]!): [Pizza]
    getPizzasByIngredients(ingredients: [String]!): [Pizza]
    getCalculation(pizzaCalculatorInput: PizzaCalculatorInput!): PizzaCalculatorOutput
    ## Ingredients
    getIngredients: [Ingredient]
    getIngredientsByName(name: String): [Ingredient]
    getIngredientsByVegetarian(vegetarian: Boolean!): [Ingredient]
    getIngredientsByVegan(vegan: Boolean!): [Ingredient]
    ## Drinks
    getDrinks: [Drink]
    getDrinkByName(name: String!): Drink
    getDrinksByAlcoholic(alcoholic: Boolean!): [Drink]
    ## Orders
    getOrders: [Order]
    getOrdersById(id: Int!): [Order]
    getOrdersByCustomerName(name: String!): [Order]
    getOrdersByCustomerNames(names: [String]!): [Order]
    ## Customers
    getCustomers: [Customer]
    getCustomerByCustomerId(id: Int!): [Customer]
    getCustomerByFirstName(firstName: String!): [Customer]
    getCustomerByLastName(lastName: String!): [Customer]
    getCustomerByEmailAddress(emailAddress: String!): [Customer]
    getCustomerByFullName(fullName: String!): [Customer]
}

type Mutation {
    createIngredient(ingredientInput: IngredientInput!): Ingredient
    createPizza(pizzaInput: PizzaInput!): Pizza
    createDrink(drinkInput: DrinkInput!): Drink
    createOrder(orderInput: OrderInput!): Order
    createCustomer(customerInput: CustomerInput!): Customer
}

## Pizza
type Pizza {
    id: ID
    name: String!
    ingredients: [String]!
    price: Float
    cost: Float
    glutenFree: Boolean
    vegetarian: Boolean
    vegan: Boolean
}

input PizzaInput {
    name: String!
    ingredients: [String]!
}

## Ingredient
type Ingredient {
    id: ID
    name: String!
    cost: Float!
    glutenFree: Boolean
    vegetarian: Boolean
    vegan: Boolean
}

input IngredientInput {
    name: String!
    cost: Float!
    glutenFree: Boolean!
    vegetarian: Boolean!
    vegan: Boolean!
}

## Drink
type Drink {
    id: ID
    name: String!
    cost: Float
    glutenFree: Boolean
    vegetarian: Boolean
    vegan: Boolean
    alcoholic: Boolean
}

input DrinkInput {
    name: String!
    cost: Float!
    glutenFree: Boolean!
    vegetarian: Boolean!
    vegan: Boolean!
    alcoholic: Boolean!
}

## Order
type Order {
    id: Int
    timestamp: String
    customerId: Int
    pizzas: [String]
    drinks: [String]
    cost: Float
    price: Float
    alcoholic: Boolean
    vegetarian: Boolean
    vegan: Boolean
}

input OrderInput {
    customer: CustomerInput!
    pizzas: [String]
    drinks: [String]
}

## Pizza Calculator
type PizzaCalculatorOutput {
    totalMass: Int!
    flour: Int!
    water: Int!
    salt: Int!
    yeast: Int!
}

input PizzaCalculatorInput {
    hydration: Float!
    saltPercentage: Float!
    doughMass: Int!
    numberDoughBalls: Int!
}

## Customer
type Customer {
    firstName: String!
    lastName: String!
    emailAddress: String!
    numberOfOrders: Int
}

input CustomerInput {
    firstName: String!
    lastName: String!
    emailAddress: String!
}